/*
const fs = require('fs');
const path = require('path');

const COMPONENTS_DIR = path.resolve(__dirname, 'frontend/src/pages');
const OUTPUT_FILE = path.resolve(__dirname, 'frontend/src/component-map.ts');

function pascalCase(filePath) {
    return filePath
        .replace(/\.tsx?$/, '')                            // remove extension
        .split(/[\\/]/)                                    // split by path
        .map(part => part.replace(/(^\w|-\w)/g, m => m.replace('-', '').toUpperCase()))
        .join('');
}

function walk(dir) {
    let results = [];

    fs.readdirSync(dir).forEach(file => {
        const fullPath = path.join(dir, file);
        const stat = fs.statSync(fullPath);

        if (stat.isDirectory()) {
            results = results.concat(walk(fullPath));
        } else if (file.endsWith('.tsx') || file.endsWith('.jsx')) {
            results.push(fullPath);
        }
    });

    return results;
}

function generateMap() {
    const files = walk(COMPONENTS_DIR);
    const imports = [];
    const mappings = [];

    files.forEach((filePath, i) => {
        const relativePath = path.relative(path.dirname(OUTPUT_FILE), filePath).replace(/\\/g, '/');
        const importPath = relativePath.replace(/\.tsx?$/, '');
        const componentName = pascalCase(path.relative(COMPONENTS_DIR, filePath));

        imports.push(`import ${componentName} from '${importPath.startsWith('.') ? importPath : './' + importPath}';`);
        mappings.push(`  "${componentName}": ${componentName},`);
    });

    const content = `
/!**
 * Auto-generated by generate-component-map.js
 *!/
import { FC } from 'react';
${imports.join('\n')}

export const componentMap: Record<string, FC> = {
${mappings.join('\n')}
};
`;

    fs.writeFileSync(OUTPUT_FILE, content.trim() + '\n');
    console.log(`âœ… Component map generated with ${files.length} component(s): ${OUTPUT_FILE}`);
}

generateMap();
*/
